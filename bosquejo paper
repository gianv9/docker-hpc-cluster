Ideas paper

Resumen ...

            ---> Sobre que es el proyecto?
En el presente trabajo de investigación describe una solución de software, que ofrece varios ambientes de desarrollo y prueba de
programas que se desenvuelven en el ambito de la computacion distribuida, computacion paralela y computacion de alto rendimiento.
Es posible desplegar el producto de esta investigación de forma automatizada en virtualmente cualquier ambiente que soporte la
 instalación de la herramienta docker.
            ---> Para quien esta hecho?
 El principal objetivo es proveer una solucion que permita desplegar un ambiente de cluster HPC a usuarios o desarrolladores
 que no cuenten con los recursos, tiempo u experiencia para conceptualizar, implementar y mantener un ambiente de cluser para
 el desarrollo de aplicativos que aprovechen un ambiente con estas caracteriasticas. 
            ---> que problemas soluciona?
 Mas adelante se explica con mas detalle
 los posibles casos de uso de una solucion de este tipo.
            ---> Que utilidad tiene?
 Esta solucion esta compuesta de varias imagenes, cuyo alcance debera ser capaz de cubrir multiples casos de uso y proveer
  flexibiliad en cuanto a requerimientos de hardware, disponibilidad de equipos y necesidades del ambiente de desarrollo.


Introduccion

Que paso antes? que llevo a esta idea?
Es comun en un ambiente de cluster hpc que los diferentes usuarios y/o desarrolladores pretendan disponer de los recursos del ambiente
para llevar a cabo sus actividades, lo que lleva a problemas como que un proceso se mantenga ejecutando por mucho tiempo, privando
al resto del uso de los recursos que reservo. Herramientas como el planificador de tarea Slurm evitan que procesos defectuosos o
 mal programados utilicen los recursos indefinidamente. Sin embargo aun con estos mecanismos de control es posible que estos procesos
 erraticos afecten el estado del cluster, impidiendo que futuros procesos funcionen con normalidad y generando la necesidad de 
 auditar el sistema e interrupciones en la disponibilidad del mismo. 

La naturaleza declarativa de la herramienta docker y el aislamiento de procesos mediante el uso de contenedores lxc,
 permite entonces definir un ambiente de cluster que funcione de manera ininterrumpida, posea alta disponibilidad, 
 y mas importante aun, que permita que el estado del cluster sea replicable e indepente del ambiente en el que es desplegado.
 Esto permite incluso que un ambiente de cluster pueda coexistir a la par de otras instancias del mismo con otras herramientas
  o configuraciones especializadas. Otro aspecto importante es que esta automatizacion abstrae las dificultades y necesidad de
  conocimiento tecnico y costos de hardware requerido para implementar un ambiente de HPC. Durante la concepcion de esta idea se
  encontro el proyecto del profesor nikyle nguyen, fue entonces cuando se decidio utilizar su trabajo como base para el desarrollo
  de este proyecto. Durante este trabajo se detallan las contribuciones y desarrollos posteriores realizados sobre la misma, las 
  alternativas desarrolladas e integradas y las nuevas posibilidades que la solucion resultante permite.

  El ambiente aqui descrito no pretende competir con un ambiente de cluster tradicional HPC en terminos de velocidad o capacidad
  de procesamiento, dada la naturaleza del hardware sobre el cual fue probado y para el cual fue concebido (computadores personales
  interconectados principalmente a traves de cables ethernet).
  Sin embargo, su arquitectura permite entre otras cosas:
  - Mayor accesibilidad: Facilita el aprendizaje conceptos computacion distribuida a estudiantes e investigadores que generalmente,
   no tienen acceso a un ambiente de este tipo.
  - Ambiente de pruebas portable (sandbox): Debido a que docker soporta la mayoria de sistemas operativos, es posible ejecutar una
  o mas instancias del cluster en cualquiera de estos. Permitiendo a los desarrolladores ejecutar sus programas independientemente
  de la plataforma en la que se encuentren. Esto es cierto siempre y cuando sus computadores tengan un sistema operativo de 64 bits,
  bien sea linux (soporte nativo de contenedores lxc) o posean soporte de virtualizacion en windows o mac (docker-toolbox y 
  docker-for-mac respectivamente).
  - Maleable, dinámico: Modificar la configuracion de lanzamiento (script de lanzamiento y archivo yaml) o las
   herramientas y configuraciones del sistema (Dockerfile), bastara para modificar la arquitectura y ambiente del cluster.
   Además la herramienta de orquestación de contenedores Docker Swarm se encarga de utilizar los recursos de disponibles, incluso
   si variasen en el tiempo (se agregan o se quitan computadores), manteniendo consistente el estado del cluster.

Actualmente esta solucion ofrece varios ambientes de desarrollo para HPC, estos ambientes
permiten diversificar y ampliar el caso de uso del producto en cuestión. Las variantes o flavors que
definen los ambientes que ofrece esta solución formaran parte de un mismo proyecto dentro de un
repositorio de Docker Hub \cite{gianv9_2019_Dockerhub}, en donde cada variante (imagen) puede tener un conjunto de 
herramientas completamente diferente una de la otra. Sin embargo la arquitactura de despliegue se mantiene.

Arquitectura
**poner la foto de la arquitactura de despliegue**
** utilizar la foto para describir: **

La utilización de la herramienta docker introduce una arquitectura distinta a la de un cluster tradicional, como puede observarse
en la figura X. A continuacion se describira brevemente los elementos alli representados:

- Almacenamiento
Un ambiente de este tipo requiere de un almacenamiento comun para todos los nodos, de manera que los archivos fuente a ser ejecutados
de manera paralela esten disponibles para cada uno de ellos. Aun cuando docker cuenta con la capacidad de montar "Volumenes" (directorios
locales del host que son montados en una ruta dentro del contenedor), como los contenedores van a estar corriendo en diferentes computadores
cada uno tendria una version local del punto de montaje diferente entre si. La centralizacion del almacenamiento en un Swarm no 
es una caracteriastica o funcionalidad nativa del mismo, el desarrollo de dicha caracteristica se encuentra fuera del alcance de este trabajo. 
Existen herramientas que implementan este requerimiento, pueden instalarse en forma de un plugin de docker, y dan soporte especializado
 a diferentes plataformas como amazon web services, u otros programas de orquestacion de contenedores como kubernetes. Estos plugins
 los que se habla anteriormente, en la mayoria de los casos requiere una instalacion y configuracion que no es amigable para usuarios inexpertos,
 o requiere de pasos extra que aumentan la complejidad de la instalacion. Para que esta solucion sea verdaderamente simple de utilizar
  y portable, se eligio un plugin muy simple de instalar y configurar, que se encarga de montar un directorio en un servidor remoto
  a traves utilizado la herramienta sshfs, y lo hace disponible como un volumen local para el uso de los contenedores (nodos trabajadores).
Otro beneficio de utilizar este plugin es que es compatible con el ambiente playwithdocker, un sandbox temporal para la ejecucion de 
proyectos que utilizan la herramienta docker y su orquestador swarm. Permitiendo desplegar este la solucion de este proyecto en
 un par de minutos.

Es importante acotar que cuando el swarm posee un solo nodo, el script de despliegue le indica a los nodos del cluster que utilicen
 un volumen local, ya que no tiene sentido montar de manera remota un directorio local.

- Contenedores, servicios y stacks
cada nodo es encapsulado en un contenedor que contiene todas las herramientas necesarias para su funcionamiento,
dandole autonomia y aislamiento. Estos contenedores pueden pertenecer a dos servicios, uno que despliega el nodo maestro y otro
que despliega un nodo esclavo junto con sus replicas. A su vez, estos servicios forman parte de un Stack. Un stack es un grupo de servicios
interrelacionados que pueden copartir dependencias o pueden ser orquestados para ser escalados en conjunto (https://docs.docker.com/get-started/part5/).
Ambos servicios pueden ser desplegados automaticamente utilizando un archivo de configuracion yaml en donde los mismos son definidos.
Esto permite ademas que los servicios de los esclavos puedan ser replicados a voluntas, agregando o disminuyendo recursos al cluster.

- Comunicacion
La comunicacion entre estos nodos se realiza a traves de una red virtual llamada red overlay, 
nativa de la herramienta docker, que se asemeja bastante a una VLAN ya que segmenta la red de manera logica. 
Sin embargo esta no necesariamente tiene que ser local.

- Scripts de lanzamiento
- Ambiente y Herramientas

Despliegue de la solucion
- configuracion previa
- ejemplos de lanzamiento de los flavours utilizando el script

Posibilidade / Casos de uso
- 


TODO

completar la documentacion de la wiki del repositorio


hacer que por defecto el script no requiera compilar y subir la imagen a un repositorio

Repositorio local:
También es posible generar un repositorio local (más adelante se
explica este proceso), para que el script publique la imagen construida en él y los nodos puedan
aprovechar la velocidad de la red local para reducir el tiempo en el que se despliega el clúster